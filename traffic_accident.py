# -*- coding: utf-8 -*-
"""Traffic_accident.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14vlo0P0U6qyocYU4JF2FaO5hD1DtWDE1
"""

#Import libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import folium
from folium.plugins import HeatMap

#Load dataset
df = pd.read_csv('/content/traffic_accidents.csv')
df.head()

df = df.head(2000)

# Reset index
df = df.reset_index(drop=True)

# Save reduced dataset
df.to_csv("traffic_accidents_cleaned.csv", index=False)
from google.colab import files
files.download("traffic_accidents_cleaned.csv")

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# --- Plot 1: Accidents by Hour of Day ---
plt.figure(figsize=(14, 6))
hourly_counts = df['crash_hour'].value_counts().sort_index()
sns.lineplot(x=hourly_counts.index, y=hourly_counts.values, marker='o', color='steelblue')
plt.title('Accidents by Hour of Day', fontsize=18, weight='bold')
plt.xlabel('Hour (0â€“23)', fontsize=14); plt.ylabel('Accident Count', fontsize=14)
plt.xticks(range(24), fontsize=12); plt.yticks(fontsize=12)
plt.grid(ls='--', alpha=0.5)
plt.tight_layout()
plt.show()

# --- Plot 2: Accidents by Road Condition ---
plt.figure(figsize=(14, 6))
road_counts = df['roadway_surface_cond'].value_counts()
colors = plt.cm.Oranges(np.linspace(0.4, 0.9, len(road_counts)))
plt.barh(road_counts.index, road_counts.values, color=colors, edgecolor='black')
plt.title('Accidents by Road Condition', fontsize=18, weight='bold')
plt.xlabel('Accident Count', fontsize=14); plt.ylabel('Road Condition', fontsize=14)
plt.xticks(fontsize=12); plt.yticks(fontsize=12)
plt.grid(axis='x', ls='--', alpha=0.5)
plt.tight_layout()
plt.show()

# --- Plot 3: Accidents by Weather Condition ---
df['weather_cond_clean'] = df['weather_condition'].apply(
    lambda x: x if df['weather_condition'].value_counts()[x] > 50 and x not in
    ['Blowing Snow', 'Severe Crosswinds', 'Blowing Sand', 'Blowing Soil'] else 'Other'
)
plt.figure(figsize=(14, 6))
sns.countplot(x='weather_cond_clean', data=df,
              order=df['weather_cond_clean'].value_counts().index,
              palette='Greens', edgecolor='black')
plt.title('Accidents by Weather Condition', fontsize=18, weight='bold')
plt.xlabel('Weather Condition', fontsize=14); plt.ylabel('Accident Count', fontsize=14)
plt.xticks(rotation=45, fontsize=12); plt.yticks(fontsize=12)
plt.grid(axis='y', ls='--', alpha=0.5)
plt.tight_layout()
plt.show()

# --- Plot 4: Accidents by Lighting Condition ---
plt.figure(figsize=(8, 8))
light_counts = df['lighting_condition'].value_counts()
colors = sns.color_palette('Purples', len(light_counts))
plt.pie(light_counts, labels=light_counts.index, colors=colors, autopct='%1.1f%%',
        startangle=30, wedgeprops={'edgecolor': 'black'})
plt.gca().add_artist(plt.Circle((0, 0), 0.7, color='white'))  # Donut center
plt.title('Accidents by Lighting Condition', fontsize=16, weight='bold')
plt.tight_layout()
plt.show()